import datetime


def current_time_to_str():
    time = datetime.datetime.now()
    return time.strftime("%H:%M:%S")


def is_member(username, conversation_members):
    # checks if username is a member in the conversation
    for name in conversation_members:
        if username == name:
            return True
    return False


def enough_space(msg_content, conversation_size, max_conversation_size):
    # returns false if there is no enough space or true if there is
    return len(msg_content) + conversation_size < max_conversation_size


def conversation_is_empty(conversation):
    # returns true if the conversation is empty, and false otherwise
    return len(conversation) == 0


def msg_to_string(msg):
    msg_str = "(" + str(msg[0]) + ") " + msg[3] + " " + msg[1] + ": " + msg[2] + "\n"
    return msg_str


def conversation_to_string(conversation):
    # takes a conversation, and returns a string that includes the messages with /n between
    str1 = ""
    for msg in conversation:
        str1 += msg_to_string(msg)
    return str1[:-1]


def show_conversation(conversation):
    print(conversation_to_string(conversation))


def send_msg(username, msg_content, msg_last_id, conversation_size, max_conversation_size, conversation):
    if enough_space(msg_content, conversation_size, max_conversation_size):
        msg_last_id += 1
        conversation_size += len(msg_content)
        msg = [msg_last_id, username, msg_content, current_time_to_str()]
        conversation.append(msg)
        if msg_content.endswith(".txt"):  # if it's a txt file, fix it with "file_fixing"
            file_fixing(msg_content)
    return msg_last_id, conversation_size


def find_msg_index(msg_id, conversation):
    for i, msg in enumerate(conversation):
        if msg[0] == msg_id:
            return i
    return -1


def delete_msg(msg_id, conversation_size, conversation):
    i = find_msg_index(msg_id, conversation)
    if i == -1:
        return -1
    else:
        del_msg_size = len(conversation[i][2])  # gets the size of the message that is about to be deleted
        conversation_size = conversation_size - del_msg_size
        conversation.pop(i)
    return conversation_size


def star_marking(msg_id, conversation):
    i = find_msg_index(msg_id, conversation)
    if i == -1:
        return -1
    else:
        if len(conversation[i]) != 5:
            conversation[i].append('Starred')
        else:
            conversation[i].pop(4)
    return 0


def print_starred_messages(conversation):
    str_msg = ""
    for msg in conversation:
        if len(msg) == 5:
            str_msg += msg_to_string(msg)
    if str_msg != "":
        return str_msg[:-1]
    return -1


def fix_line(line):
    # a function that will help in file_fixing, takes a line and returns it after fixing(reversing every word in it)
    line = line[:-1]  # removes the \n from the end
    lst = line.split(" ")
    reversed_lst = []
    reversed_line = ""
    for word in lst:
        # for each word, it will append the reversed word into a new list
        reversed_lst.append(word[::-1])
    for reversed_word in reversed_lst:
        reversed_line += reversed_word + " "
    return reversed_line[:-1] + "\n"  # removes the " " that inserted in the last iteration over reversed_lst and
    # then adds "\n"


def file_fixing(filename):
    new_filename = "output_" + filename
    new_f = open(new_filename, 'a')
    with open(filename, 'r') as f:
        lines = f.readlines()
        for line in lines:
            new_f.write(fix_line(line))  # appends a fixed line into a new file called new_f
    new_f.close()


def time_in_word(str1, word):
    count = 0
    for c in word:
        if str1 == c:
            count += 1
    return count


def first_biggest(lst):
    # takes a list and returns the first index of the biggest int inside
    biggest = 0
    biggest_index = 0
    for i, num in enumerate(lst):
        if num > biggest:
            biggest = num
            biggest_index = i
    return biggest_index


def is_abc_in(word, abc):
    if len(word) <= 26:
        return False
    else:
        for c in abc:
            if word.find(c) == -1 and word.find(c.upper()) == -1:  # if there is any letter that is not in word
                return False
    return True


def internal_check(conversation):
    num_of_tot = 0  # the number of words with all the abc
    count_lst = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # how many times each
    # letter appear in the conversation
    abc = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
           'w', 'x', 'y', 'z']
    for i, ch in enumerate(abc):
        for msg in conversation:
            count_lst[i] += time_in_word(ch, msg[2])
            count_lst[i] += time_in_word(ch.upper(), msg[2])
    biggest_index = first_biggest(count_lst)  # the index of the biggest element goes to biggest_index
    for msg in conversation:
        if is_abc_in(msg[2], abc):  # if the message includes all the abc letters
            num_of_tot += 1
    return num_of_tot, abc[biggest_index], count_lst[biggest_index]


def interactive_system(conversation_members=("Steve", "Bill"), max_conversation_size=300):
    conversation_size = 0
    conversation = []
    msg_last_id = 0
    while True:
        print("##################################################\nWelcome to UpWhats! What would you like to do?\n\
[0] End conversation\n[1] Show full conversation\n[2] Send new message\n[3] Remove existing message\n\
[4] Star a message\n[5] Show starred messages\n[6] Internal check")
        username = input("Please enter username (only conversation's members are allowed to send/read messages.)\n")
        if is_member(username, conversation_members):
            choice = input("Please type your choice and press ENTER\n")
            if choice not in ["0", "1", "2", "3", "4", "5", "6"]:
                print("Invalid choice")
                continue
            if choice == '0':
                print("Thank you for using UpWhats! See you soon. Bye.")
                break
            elif choice == '1':
                if conversation_is_empty(conversation):
                    print("Conversation is empty")
                else:
                    show_conversation(conversation)
            elif choice == '2':
                msg_content = input("Please type your message.\n")
                prev_msg_last_id, prev_conversation_size = msg_last_id, conversation_size
                msg_last_id, conversation_size = send_msg(username, msg_content, msg_last_id, conversation_size,
                                                          max_conversation_size, conversation)
                if prev_msg_last_id == msg_last_id and prev_conversation_size == conversation_size:
                    print("There is not enough space in the storage!")
                else:
                    print("Message was sent successfully!")
            elif choice == '3':
                msg_id = input("Please enter message id.\n")
                new_size = delete_msg(int(msg_id), conversation_size, conversation)
                if new_size == -1:
                    print("There is no message with this identifier")
                else:
                    conversation_size = new_size
                    print("Message was removed successfully!")
            elif choice == '4':
                msg_id = input("Please enter message id.\n")
                marked = star_marking(int(msg_id), conversation)
                if marked == -1:
                    print("There is no message with this identifier")
            elif choice == '5':
                starred_concat = print_starred_messages(conversation)
                if starred_concat == -1:
                    print("There are no starred messages")
                else:
                    print(starred_concat)
            elif choice == '6':
                internal_check_tuple = internal_check(conversation)
                print("The number of messages that contains all the alphabet is {0}, and the most common char is '{1}' \
which appeared {2} times".format(str(internal_check_tuple[0]), internal_check_tuple[1], internal_check_tuple[2]))
        else:
            print("You're not a member of this group!")


if __name__ == "__main__":
    interactive_system()
